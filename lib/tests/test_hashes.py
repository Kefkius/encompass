import unittest
import coinhash

from lib.bitcoin import rev_hex
from lib import chainparams

chainparams.init_chains()

class Test_hashes(unittest.TestCase):

    def test_sha256d(self):
        # bitcoin block 100000
        block_header = '0100000050120119172a610421a6c3011dd330d9df07b63616c2cc1f1cd00200000000006657a9252aacd5c0b2940996ecff952228c3067cc38d4885efb5a4ac4247e9f337221b4d4c86041b0f2b5710'
        actual_pow_hash = '000000000003ba27aa200b1cecaad478d2b00432346c3f1f3986da1afd33e506'
        chain = chainparams.get_chain_instance('BTC')

        self.assertEqual(actual_pow_hash, chain.hash_header( chain.header_from_string(block_header.decode('hex')) ))

    def test_scrypt(self):
        # litecoin block 20000
        block_header = '010000006bce902b61adcac03429993a51deaaff5229d21453af96d5a1425ba956edeebec3c4551556f8340cfd54292411a8f2c1d6a4f2444651619fcad4708aefc0c020c6f4a94e678a041d81590000'
        actual_pow_hash = '000000010f3a68cae10585dea46116e5298a83458bd05ab2169829a84ff3ef1e'
        chain = chainparams.get_chain_instance('LTC')

        self.assertEqual(actual_pow_hash, chain.pow_hash_header( chain.header_from_string(block_header.decode('hex')) ))

    def test_x11(self):
        # dash block 200000
        block_header = '020000007e3aab137b7d64096f20613289197414631bad462e139f445edb030000000000efc89e19be378dc9d2e6f00048611a405acf76f78334cb8504ce119fbade8420ce36af54e4bc181bfcdef446'
        actual_pow_hash = '000000000004d0615ff622ec78457ca211dc63fc9c62cca9d9d9af7206be721b'
        chain = chainparams.get_chain_instance('DASH')

        self.assertEqual(actual_pow_hash, chain.hash_header( chain.header_from_string(block_header.decode('hex')) ))

    def test_neoscrypt(self):
        # feathercoin block 732700
        raw_block = '0200000082ad0f32d0dca2438ec33dd5eabd612fee6cd28559a37c34cc17a0d813f8b01ff2e7b7179c2b869dde5b5fa516e86187d599a15b05cda223b5407ec2b1ca802a8a946c55ad623f1cca6115000301000000010000000000000000000000000000000000000000000000000000000000000000ffffffff2d031c2e0b062f503253482f048a946c55086800169235000000132f474956452d4d452d434f494e532e636f6d2f0000000001a0d6d7dc010000001976a914cfd4166bf463109717ef6bda95a01c40e0ab9ba288ac000000000100000001e920ef6dd0f2395d6cb829f3b2a99dc067ede1bffbf57bb58622b65c9b1dd5f8000000006c493046022100b8b2cd44ae056b84bf9c3a887347af64d6974dba25e181f68a1db74a451c67bb0221008c8bcc2b001faf3c23fcd6064368afc1ca91000959e8759d26a701aced7cf6d40121038c3c33640db4a025f3ebefe5f3b705708236f5104b29d4a1eb60971d58d931c3ffffffff036dcf2719010000001976a914b6dabc407e13cfb474713c9c96e13a2f6c7d1b2888ac8379ce3d000000001976a91484b09afa67a69fc5ffa90e27359acde0b7309cb988ac1007e085000000001976a9145cbe3c20de96194fef74df5b5d9da6b5643b92cb88ac000000000100000001df8fed0c1602f3e57ef586a491f673bbd124c3751bd783effb9f2a3259b98f43010000006b4830450220375b6508a97f2d080b8bd380830565216e54d05f2e89fda96beb22e9624c2811022100e836367122271516dc43f34e88a4e1a2e14cc6263ba144ee83abf5bb7ec0d20f012102e355f533557054cd9df7465e762c9bb71ec85febe844acf12d83db4caf4f9408ffffffff021295e437000000001976a914545b159ee0c7593a4ccd79714caf08fe1b58cee388ac1c7a0f00000000001976a914a4af10954d9fd6556ed7e6d3d8b927bcac1cce4688ac00000000'
        actual_pow_hash = '00000000194b59f845a26aa4be535d6f645c502999b932faf62e9d4300c14bf5'

        self.assertEqual(actual_pow_hash, rev_hex(coinhash.NeoscryptHash(raw_block.decode('hex')).encode('hex')))

    def test_groestlcoin_hashes(self):
        # Arbitrarily chosen GRS transaction.
        raw_tx = '010000000446d8ff710409b1214e4ba34848f05ea3c8121b50555793324053e57d118a3c4c010000006a473044022030502bbb104f88b6b886acd7c183c87eab36211feed3138baeab95980a687b5a02200219bf1317f178c49d9b5fa23e0211f7407f476ba8378c4282922eafe6922b0e012102ca2e9f4ba4dd1217212f6a6526fbb0952c49988583190ab0cf61383c9eb99560feffffff2439b423b36ed2c50524a5ae2838b0e64dc49f8dbb38e8bd62aa1db4f7f17ad0030000006b4830450221008866ef49f3495f5c64df24c3012a9d829a2a7238ce6cf7ffd5b4504a611e578002207ea4deeb6590002fe00d124a79b7f108e2e05dc76eb7afc91f88fec96ead3474012103b64c36462fb89c45017d66ba267f87406844ee1784d7a822d3c04df48ae23581feffffff5f0857cb74103e2401243d70b2685c419e06618d4c9e3122c3fd4983b2a9ca54020000006b4830450221008c4c69ccc6a38ea699d20aad7856baad1d835a99ed4436fd129f2047164857a2022034474bfee307c0e5d224e40859d8e1cdee6cef8ae48c6072f3b0ca671fb61f70012103775699df43902c4b37a4b89c375726fabefb6bacf45a06181cfd4cd9048dbce4feffffff0ba14b596804bc2de7f91e9754d089a2d1aff0282abe1ee5dd5dd8f845b75b3c080000006a4730440220165199cd732a189b756f8c6c3b53a356248ec093ce0430e84c886e348b22a4c6022038dcf37a538d30522fa6a4d3f682440200c2d8d3644395cab396708a4bdb7bfd01210304519faa162a54658c6e6b234d22ad18cf462df26aae2ebd8b76e4fb784e8863feffffff0dc2663607000000001976a914ab855d5b21c8c812681e7119d98335f478948fa488ac156d3a41000000001976a914a978176277f016a80254ac07125cc5d7af7a64c888ac9e172000000000001976a91488c75ca6a0a7f1e2b55f6d2668efe0bc589d605288ac8f4bcc12000000001976a914c4ca15b91fddf3566a3851fb0e77c77ef4b2d5b688aca7e6bf0c000000001976a914ccad4dcf688ce4dd2441ccbe741f123aaa4b5e8788ac16c15807000000001976a914372b5a0e045af3b6ace4336280fcf6f7ba2143d588acadf5f95c010000001976a914493f7576e6b26c3b3391b134b0013a18dbe7442e88acf755660d000000001976a914dfeb51b749a9387651d117967573f7a0d02a91de88acda690a06000000001976a9146fb41feae669f5c5f88bd0585fcb303ed6a549a988ac487ac615000000001976a914ab430d3174c7504beb4863cb4eefa9500cbfc2b988acc615ed06000000001976a914e3a2e804ed7dbff3c3dd3e157831da87ee95d99288acac02f607000000001976a914ef9a18a7c88174adfb3f9da68b6280b5a054c1a888ac0bf0bc79000000001976a914aea181d81b88f1ca44d99faebba0c0dd32a6976388ac9ec90d00'
        actual_tx_hash = 'ec415aad6b8d5888e8bb1d59fe833f8736ffc683324bfb72d7928da98b283ad1'

        block_header = '03000000c3751144799a0f0a22784769fd7b4cd0d4587833f19a18ddf32bbe03000000000c4b626e400ebbc7f4f81d26bfff874c2d9d951e3c6ccb90f0bf0ce9b7b52e5644b181569623121c2d1a2b06'
        actual_block_hash = '0000000003ae85941d32507e8af41d5fc1bdf0bf1b8be8b7a3f2bd8a7f1ed4a0'

        chain = chainparams.get_chain_instance('GRS')
        self.assertEqual(actual_tx_hash, rev_hex(chain.hash_algo('transaction')(raw_tx.decode('hex')).encode('hex')))
        self.assertEqual(actual_block_hash, chain.hash_header( chain.header_from_string(block_header.decode('hex')) ))

